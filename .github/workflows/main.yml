name: radiocores

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build Docker image
        run: docker build -t myapp .devcontainer

      - name: Run Black Python formatter inside Docker container
        run: docker run --rm -v ${{ github.workspace }}:/app myapp black --check /app

      - name: Run pytest inside Docker container
        run: |
          ci_env=`bash <(curl -s https://codecov.io/env)`
          docker run $ci_env -e CI=true --rm -v ${{ github.workspace }}:/app myapp pytest --cov-config=radiocores/.coveragerc --cov radiocores --cov-report=xml

      - name: Upload test logs in Docker
        run: |
          docker run -e CI=true --rm -v ${{ github.workspace }}:/app -w /app myapp /bin/bash -c "
            find radiocores/gray2bin/rtl/sim_build_* -name '*.log' -exec echo '{}' \; > /tmp/log_files.txt && \
            tar -czf /tmp/test_logs.tar.gz -T /tmp/log_files.txt
          "
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: /tmp/test_logs.tar.gz

      # Ensure the sim_build directory exists
      - name: Create sim_build directory
        run: mkdir -p sim_build

      # Merge all coverage.dat files
      - name: Merge and generate coverage in Docker
        run: |
          ci_env=$(bash <(curl -s https://codecov.io/env))
          docker run $ci_env -e CI=true --rm -v ${{ github.workspace }}:/app -w /app myapp /bin/bash -c "
            find . -name 'coverage.dat' > sim_build/coverage_files.txt && \
            verilator_coverage -write sim_build/merged_coverage.dat \$(cat sim_build/coverage_files.txt) && \
            verilator_coverage --annotate sim_build/annotated --annotate-min 1 --write-info sim_build/coverage.info sim_build/merged_coverage.dat
          "

      # Translate merged coverage report to LCOV report
      - name: Generate Verilator LCOV report
        run: |
          docker run \
            $ci_env \
            -e CI=true \
            --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            myapp \
            verilator_coverage \
              --annotate sim_build/annotated \
              --annotate-min 1 \
              --write-info sim_build/coverage.info \
              sim_build/merged_coverage.dat

      - name: Check files
        run: ls

      - name: Publish Codecov report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml,sim_build/coverage.info
          fail_ci_if_error: true
          verbose: true
